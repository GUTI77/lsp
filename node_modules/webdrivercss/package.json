{
  "name": "webdrivercss",
  "version": "1.0.0",
  "description": "Regression testing tool for WebdriverJS",
  "author": {
    "name": "Christian Bromann",
    "email": "mail@christian-bromann.com"
  },
  "license": "MIT",
  "main": "index.js",
  "scripts": {
    "test": "mocha",
    "travis": "mocha -R $MOCHA_REPORTERS",
    "prepublish": "npm prune"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/webdriverio/webdrivercss.git"
  },
  "dependencies": {
    "async": "^0.2.10",
    "deepmerge": "^0.2.7",
    "glob": "^3.2.9",
    "gm": "^1.14.2",
    "request": "^2.34.0",
    "resemble": "^1.0.3",
    "rimraf": "^2.2.8",
    "tar": "^0.1.19",
    "tar.gz": "^0.1.1"
  },
  "devDependencies": {
    "chai": "^1.9.1",
    "coveralls": "~2.10.0",
    "fs-extra": "^0.8.1",
    "istanbul": "^0.2.7",
    "mocha": "^1.18.2",
    "mocha-istanbul": "^0.2.0",
    "nock": "^0.42.1",
    "webdriverio": "^2.3.0"
  },
  "keywords": [
    "webdriverjs",
    "webdriverio",
    "webdriver",
    "phantomcss",
    "regression",
    "test",
    "testing",
    "css",
    "responsive",
    "design"
  ],
  "readme": "WebdriverCSS [![Version](http://img.shields.io/badge/version-v1.0.0-brightgreen.svg)](https://www.npmjs.org/package/webdrivercss) [![Build Status](https://travis-ci.org/webdriverio/webdrivercss.png?branch=master)](https://travis-ci.org/webdriverio/webdrivercss) [![Coverage Status](https://coveralls.io/repos/webdriverio/webdrivercss/badge.png?branch=master)](https://coveralls.io/r/webdriverio/webdrivercss?branch=master)\n============\n\n__CSS regression testing in WebdriverIO__. This plugin is an automatic visual regression-testing\ntool for [WebdriverIO](http://webdriver.io). It was inspired by [James Cryers](https://github.com/jamescryer)\nawesome project called [PhantomCSS](https://github.com/Huddle/PhantomCSS). After\ninitialization it enhances a WebdriverIO instance with an additional command called\n`webdrivercss` and enables the possibility to save screenshots of specific parts of\nyour application.\n\n#### Never lose track of unwanted CSS changes:\n\n![alt text](http://webdriver.io/images/webdrivercss/hero.png \"Logo Title Text 1\")\n\n\n## How does it work?\n\n1. Define areas within your application that should always look the same\n2. Use WebdriverIO and WebdriverCSS to write some E2E tests and take screenshots of these areas\n3. Continue working on your application or website\n4. After a while rerun the tests\n5. If desired areas differ from previous taken screenshots an image diff gets generated and you get notified in your tests\n\n\n### Example\n\n```js\nvar assert = require('assert');\n\n// init WebdriverIO\nvar client = require('webdriverio').remote({desiredCapabilities:{browserName: 'chrome'}})\n// init WebdriverCSS\nrequire('webdrivercss').init(client);\n\nclient\n    .init()\n    .url('http://example.com')\n    .webdrivercss('startpage',[\n        {\n            name: 'header'\n            elem: '#header'\n        }, {\n            name: 'hero'\n            elem: '//*[@id=\"hero\"]/div[2]'\n        }\n    ], function(err, res) {\n        assert.ifError(err);\n        assert.ok(res.header[0].isWithinMisMatchTolerance);\n        assert.ok(res.hero[0].isWithinMisMatchTolerance);\n    })\n    .end();\n```\n\n## Install\n\nWebdriverCSS uses GraphicsMagick/ImageMagick for image processing as well as [node-canvas](https://github.com/learnboost/node-canvas)\nfor comparing and analyzing screenshots with [node-resemble](https://github.com/kpdecker/node-resemble).\nTo install this package you'll need to have [GraphicsMagick](http://www.graphicsmagick.org/), [ImageMagick](http://www.imagemagick.org/),\n[Cairo](https://github.com/LearnBoost/node-canvas/wiki/_pages) and of course Node.JS, NPM and Python preinstalled on your system.\n\n#### Mac OS X using [Homebrew](http://mxcl.github.io/homebrew/)\n```sh\n$ brew install imagemagick graphicsmagick cairo\n```\n\n#### Ubuntu using apt-get\n```sh\n$ sudo apt-get install imagemagick libmagickcore-dev\n$ sudo apt-get install graphicsmagick\n$ sudo apt-get install libcairo2-dev\n```\n\n#### Windows\n\nDownload and install executables for [ImageMagick](http://www.imagemagick.org/script/binary-releases.php)/[GraphicsMagick](http://www.graphicsmagick.org/download.html)\nand [Cairo](http://cairographics.org/download/). Please make sure you install the right binaries desired for your system (32bit vs 64bit).\n\nAfter these dependencies are installed you can install WebdriverCSS via NPM as usual:\n\n```sh\n$ npm install webdrivercss\n$ npm install webdriverio # if not already installed\n```\n\nMake sure your `PKG_CONFIG_PATH` is set in your environment otherwise you won't be able to install `canvas`\nprobably. That actual path to your pkgconfig might differ though.\n\n```sh\n# make sure that this path exists on your machine\n$ export PKG_CONFIG_PATH=/opt/X11/lib/pkgconfig\n```\n\n## Setup\n\nTo use this plugin just call the `init` function and pass the desired WebdriverIO instance\nas parameter. Additionally you can define some options to configure the plugin. After that\nthe `webdrivercss` command will be available only for this instance.\n\n* **screenshotRoot** `String` ( default: *./webdrivercss* )<br>\n  path were all screenshots gets saved\n\n* **failedComparisonsRoot** `String` ( default: *./webdrivercss/diff* )<br>\n  path were all screenshot diffs gets saved\n\n* **misMatchTolerance** `Number` ( default: *0.05* )<br>\n  number between 0 and 100 that defines the degree of mismatch to consider two images as\n  identical, increasing this value will decrease test coverage\n\n* **screenWidth** `Numbers[]` ( default: *[]* )<br>\n  if set all screenshots will be taken in different screen widths (e.g. for responsive design tests)\n\n* **updateBaseline** `Boolean` ( default: *false* )<br>\n  updates baseline images if comparison keeps failing\n\n\n### Example\n\n```js\n// create a WebdriverIO instance\nvar client = require('webdriverio').remote({\n    desiredCapabilities: {\n        browserName: 'phantomjs'\n    }\n});\n\n// initialise WebdriverCSS for `client` instance\nrequire('webdrivercss').init(client, {\n    // example options\n    screenshotRoot: 'my-shots',\n    failedComparisonsRoot: 'diffs',\n    misMatchTolerance: 0.05,\n    screenWidth: [320,480,640,1024]\n});\n```\n\n## Usage\n\nWebdriverCSS enhances an WebdriverIO instance with an command called `webdrivercss`\n\n`client.webdrivercss('some_id', [{options}], callback);`\n\nIt provides options that will help you to define your areas exactly and exclude parts\nthat are unrelevant for design (e.g. content). Additionally it allows you to include\nthe responsive design in your regression tests easily. The following options are\navailable:\n\n* **name** `String` (required)<br>\n  name of the captured element\n\n* **elem** `String`<br>\n  only capture a specific DOM element, you can use all kinds of different [WebdriverIO selector strategies](http://webdriver.io/guide/usage/selectors.html) here\n\n* **width** `Number`<br>\n  define a fixed width for your screenshot\n\n* **height** `Number`<br>\n  define a fixed height for your screenshot\n\n* **x** `Number`<br>\n  take screenshot at an exact xy postion (requires width/height option)\n\n* **y** `Number`<br>\n  take screenshot at an exact xy postion (requires width/height option)\n\n* **exclude** `String[]|Object[]`<br>\n  exclude frequently changing parts of your screenshot, you can either pass all kinds of different [WebdriverIO selector strategies](http://webdriver.io/guide/usage/selectors.html)\n  that queries one or multiple elements or you can define x and y values which stretch a rectangle or polygon\n\n* **hide** `String[]`<br>\n  hides all elements queried by all kinds of different [WebdriverIO selector strategies](http://webdriver.io/guide/usage/selectors.html) (via `visibility: hidden`)\n\nThe following paragraphs will give you a more detailed insight how to use these options properly.\n\n### Let your test fail when screenshots differ\n\nWhen using this plugin you can decide how to handle design breaks. You can either just work\nwith the captured screenshots or you could even break your integration test at this position. The\nfollowing example shows how to handle design breaks within integration tests:\n\n```js\nvar assert = require('assert');\n\ndescribe('my website should always look the same',function() {\n\n    it('header should look the same',function(done) {\n        client\n            .url('http://www.example.org')\n            .webdrivercss('header', {\n                name: 'header',\n                elem: '#header'\n            }, function(err,res) {\n                assert.ifError(err);\n\n                // this will break the test if screenshot is not within the mismatch tolerance\n                assert.ok(res.isWithinMisMatchTolerance);\n            })\n            .call(done);\n    });\n\n    // ...\n```\n\n### [Applitools Eyes](http://applitools.com) Support\n\n![Applitools Eyes](http://pravdam.biz/clientblogs/applitools2/applitools-new-logo.png)\n\nApplitools Eyes is a comprehensive automated UI validation solution with really smart image matching algorithms\nthat are unique in this area. As a cloud service it makes your regression tests available everywhere and\naccessible to everyone in your team, and its automated maintenance features simplify baseline maintenance.\n\nIn order to work with Applitools Eyes you need to sign up and obtain an API key. You can sign up for a\nfree account [here](http://applitools.com/signup/).\n\n### Applitools Eyes Example\n\n```js\nvar assert = require('assert');\n\n// create a WebdriverIO instance\nvar client = require('webdriverio').remote({\n    desiredCapabilities: {\n        browserName: 'chrome'\n    }\n});\n\n// initialise WebdriverCSS for `client` instance\nrequire('webdrivercss').init(client, {\n    key: '<your personal API key>'\n});\n\nclient\n    .init()\n    .url('http://example.com')\n    .webdrivercss('<app name>', {\n        name: '<test name>',\n        elem: '#someElement',\n        // ...\n    }, function(err, res) {\n        assert.ifError(err);\n        assert.equal(res.steps, res.strictMatches)\n    })\n    .end();\n```\n\nThe following options might be interesting if you want to syncronize your taken images with\nan external API. Checkout the [webdrivercss-adminpanel](https://github.com/webdriverio/webdrivercss-adminpanel)\nfor more information on that.\n\n* **api** `String`\n  URL to API interface\n* **user** `String`\n  user name (only necessary if API requires Basic Authentification or oAuth)\n* **key** `String`\n  assigned user key (only necessary if API requires Basic Authentification or oAuth)\n\n\n### Define specific areas\n\nThe most powerful feature of WebdriverCSS is the possibility to define specific areas\nfor your regression tests. When calling the command, WebdriverCSS will always take a screenshot of\nthe whole website. After that it crops the image and creates a single copy for each element.\nIf you want to capture multiple images on one page make sure you pass an array of options to\nthe command. The screenshot capturing process can take a while depending on the document size\nof the website. Once you interact with the page by clicking on links, open layers or navigating\nto a new site you should call the `webdrivercss` command to take a new screenshot.\n\nTo query elements you want to capture you are able to choose all kinds of different [WebdriverIO selector strategies](http://webdriver.io/guide/usage/selectors.html) or you can\nspecify x/y coordinates to cover a more exact area.\n\n```js\nclient\n    .url('http://github.com')\n    .webdrivercss('githubform', {\n        name: 'github-signup',\n        elem: '#site-container > div.marketing-section.marketing-section-signup > div.container > form'\n    });\n```\n\nWill capture the following:\n\n![alt text](http://webdriver.io/images/webdrivercss/githubform.png \"Logo Title Text 1\")\n\n**Tip:** do right click on the desired element, then click on `Inspect Element`, then hover\nover the desired element in DevTools, open the context menu and click on `Copy CSS Path` to\nget the exact CSS selector\n\nThe following example uses xy coordinates to capture a more exact area. You should also\npass a screenWidth option to make sure that your xy parameters map perfect on the desired area.\n\n```js\nclient\n    .url('http://github.com')\n    .webdrivercss('headerbar', {\n        name: 'headerbar',\n        x: 110,\n        y: 15,\n        width: 980,\n        height: 34,\n        screenWidth: [1200]\n    });\n```\n![alt text](http://webdriver.io/images/webdrivercss/headerbar.png \"Logo Title Text 1\")\n\n\n### Exclude specific areas\n\nSometimes it is unavoidable that content gets captured and from time to time this content\nwill change of course. This would break all tests. To prevent this you can\ndetermine areas, which will get covered in black and will not be considered anymore. Here is\nan example:\n\n```js\nclient\n    .url('http://tumblr.com/themes')\n    .webdrivercss('tumblrpage', {\n        name: 'startpage',\n        exclude: ['#theme_garden > div > section.carousel > div.carousel_slides',\n                 '//*[@id=\"theme_garden\"]/div/section[3]',\n                 '//*[@id=\"theme_garden\"]/div/section[4]']\n        screenWidth: [1200]\n    });\n```\n![alt text](http://webdriver.io/images/webdrivercss/exclude.png \"Logo Title Text 1\")\n\nInstead of using a selector strategy you can also exclude areas by specifying xy values\nwhich form a rectangle.\n\n```js\nclient\n    .url('http://tumblr.com/themes')\n    .webdrivercss('tumblrpage', {\n        name: 'startpage',\n        exclude: [{\n            x0: 100, y0: 100,\n            x1: 300, y1: 200\n        }],\n        screenWidth: [1200]\n    });\n```\n\nIf your exclude object has more then two xy variables, it will try to form a polygon. This may be\nhelpful if you like to exclude complex figures like:\n\n```js\nclient\n    .url('http://tumblr.com/themes')\n    .webdrivercss('polygon', {\n        name: 'startpage',\n        exclude: [{\n            x0: 120, y0: 725,\n            x1: 120, y1: 600,\n            x2: 290, y2: 490,\n            x3: 290, y3: 255,\n            x4: 925, y4: 255,\n            x5: 925, y5: 490,\n            x6: 1080,y6: 600,\n            x7: 1080,y7: 725\n        }],\n        screenWidth: [1200]\n    });\n```\n![alt text](http://webdriver.io/images/webdrivercss/exclude2.png \"Logo Title Text 1\")\n\n### Keep an eye on mobile screen resolution\n\nIt is of course also important to check your design in multiple screen resolutions. By\nusing the `screenWidth` option WebdriverCSS automatically resizes the browser for you.\nBy adding the screen width to the file name WebdriverCSS makes sure that only shots\nwith same width will be compared.\n\n```js\nclient\n    .url('http://stephencaver.com/')\n    .webdrivercss('startpage', {\n        name: 'header',\n        elem: '#masthead',\n        screenWidth: [320,640,960]\n    });\n```\n\nThis will capture the following image at once:\n\n![alt text](http://webdriver.io/images/webdrivercss/header.new.960px.png \"Logo Title Text 1\")\n\n**file name:** header.960px.png\n\n![alt text](http://webdriver.io/images/webdrivercss/header.new.640px.png \"Logo Title Text 1\")\n\n**file name:** header.640px.png\n\n![alt text](http://webdriver.io/images/webdrivercss/header.new.320px.png \"Logo Title Text 1\")\n\n**file name:** header.320px.png\n\n### Synchronize your taken Images\n\nIf you want to have your image repository available regardless where you run your tests, you can\nuse an external API to store your shots. Therefor WebdriverCSS adds a `sync` function that downloads\nthe repository as tarball and unzips it. After running your tests you can call this function again\nto zip the current state of your repository and upload it. Here is how this can look like:\n\n```js\n// create a WebdriverIO instance\nvar client = require('webdriverio').remote({\n    desiredCapabilities: {\n        browserName: 'phantomjs'\n    }\n});\n\n// initialise WebdriverCSS for `client` instance\nrequire('webdrivercss').init(client, {\n    screenshotRoot: 'myRegressionTests',\n\n    // Provide the API route\n    api: 'http://example.com/api/webdrivercss'\n});\n\nclient\n    .init()\n    .sync() // downloads last uploaded tarball from http://example.com/api/webdrivercss/myRegressionTests.tar.gz\n    .url('http://example.com')\n\n    // do your regression tests\n    // ...\n\n    .sync() // zips your screenshot root and uploads it to http://example.com/api/webdrivercss via POST method\n    .end();\n```\n\nThis allows you to run your regression tests with the same taken shots again and again, no matter where\nyour tests are executed. It also makes distributed testing possible. Regressions tests can be done not only\nby you but everyone else who has access to the API.\n\n#### API Requirements\n\nTo implement such API you have to provide two routes for synchronization:\n\n* [GET] /some/route/:file\n  Should response the uploaded tarball (for example: /some/root/myProject.tar.gz)\n  Content-Type: `application/octet-stream`\n* [POST] /some/route\n  Request contains zipped tarball that needs to be stored on the filesystem\n\nIf you don't want to implement this by yourself, there is already such an application prepared, checkout\nthe [webdriverio/webdrivercss-adminpanel](https://github.com/webdriverio/webdrivercss-adminpanel) project.\nIt provides even a web interface for before/after comparison and stuff like this.\n\n## Contributing\nPlease fork, add specs, and send pull requests! In lieu of a formal styleguide, take care to\nmaintain the existing coding style.\n\nDefault driver instance used for testing is [PhantomJS](https://github.com/ariya/phantomjs), so you need to either have\nit installed, or change it to your preferred driver (e.g., Firefox) in the `desiredCapabilities` in the `bootstrap.js`\nfile under the `test` folder.\n\nYou also need a web server to serve the \"site\" files and have the root folder set to \"webdrivercss\". We use the\n[http-server package](https://www.npmjs.org/package/http-server).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/webdriverio/webdrivercss/issues"
  },
  "homepage": "https://github.com/webdriverio/webdrivercss",
  "_id": "webdrivercss@1.0.0",
  "_shasum": "09ca4720b2ce67d3a709a772d1be6f8764baa0de",
  "_resolved": "git://github.com/webdriverio/webdrivercss#7bba55d6278530096e8842e72f367d4dfb29b032",
  "_from": "webdrivercss@"
}
