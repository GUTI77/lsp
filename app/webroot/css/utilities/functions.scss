/* This function wraps almost every size definition in the css
   so it can be used to convert px to em if desired, across site 
   Originally it was intented to make the move to mobile easier,
   but I decided against that later, and thus it just returns the pixel input
   Any time there is a change in font size for a containing element, $context needs
   to be added on the method calls every once and awhile */
   
@function px($target, $context : 13) {
  //@if unit($target) == 'px'{
  //    @return (1 / $context)*($target / 1px) * 1em;
  //}
  @return $target;
}

/* This was intended to build a grid system without classes */
@function columns($columnCount){
    @return ($columnCount * $columnWidth) + (($columnCount - 1) * $gutterWidth);
}



/* These are convience methods to make cross-browser implementations of common
   CSS3 properties easier */

@mixin gradient($from, $to){
    background : $from; /* Old browsers */
    background : -moz-linear-gradient(top, $from 0%, $to 100%); /* FF3.6+ */
    background : -webkit-gradient(linear, left top, left bottom, color-stop(0%,$from), color-stop(100%,$to)); /* Chrome,Safari4+ */
    background : -webkit-linear-gradient(top, $from 0%,$to 100%); /* Chrome10+,Safari5.1+ */
    background : -o-linear-gradient(top, $from 0%,$to 100%); /* Opera 11.10+ */
    background : -ms-linear-gradient(top, $from 0%,$to 100%); /* IE10+ */
    background : linear-gradient(to bottom, $from 0%,$to 100%); /* W3C */
    filter:  progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$from}', EndColorStr='#{$to}'); /* IE6,IE7 */
    -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$from}', EndColorStr='#{$to}')"; /* IE8 */
}

@mixin box-shadow-multiple($params...){
  -webkit-box-shadow: #{$params};
  -moz-box-shadow: #{$params};
  box-shadow: #{$params};
}

@mixin border-radius($size...){
  border-radius: #{$size};
}

@mixin clearfix(){
    zoom: 1; /* Sigh... This is to clearfix for IE7 */
    &:after{
        display: block;
        clear: both;
        content: ' ';
    }
}


/*  This adds a little arrow-flag to the top, left, right, or bottom of a container... you'll see it used in the
    definition popup, and the notice on the checkout */
    
@mixin panel-arrow($size, $direction, $panelColor, $position : 50%, $borderWidth : 0){
    &:after, &:before{
        content: " "; 
        display: block; 
        width: 0; 
        height: 0;
        position: absolute;
        z-index: 2;
        border: px($size) inset transparent;
        
        @if $direction == 'left'{
            border-right: px($size) solid $panelColor; /*findme*/
            left: px(-($size * 2 - 1 + $borderWidth));
            margin-top: px(-($size * 2));
            top: $position;
        }@else if $direction == 'top'{
            border-bottom: px($size) solid $panelColor; 
            left: $position;
            margin-left: px(-($size * 2));
            top: px($top + 1);
        }@else if $direction == 'right'{
            border-left: px($size) solid $panelColor;
            top: $position;
            margin-top: px(-($size * 2));
            right: px((-($size * 2 + $borderWidth) + 1));
        }@else if $direction == 'bottom'{
            border-top: px($size) solid red; 
            left: $position;
            bottom: px(-(($size * 2 + $borderWidth) - 1));
        }
        
    }
    &:before{
        z-index: 1; 
                
        @if $direction == 'left'{
            border-right: px($size) solid $lightGrey;
            left: px(-($size * 2 + $borderWidth));
        }@else if $direction == 'top'{
            border-bottom: px($size) solid $lightGrey; 
            top: px(-$size * 2);
        }@else if $direction == 'right'{
            border-left: px($size) solid $lightGrey;
            right: px(-$size * 2);
        }@else if $direction == 'bottom'{
            border-top: px($size) solid $lightGrey; 
            bottom: px(-$size * 2);
        }
    }
}

@mixin opacity($value){
    filter: alpha(opacity=#{$value * 100});
    -ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$value * 100})";
    opacity: $value;
}

@mixin rotate($degrees) {
  -webkit-transform: rotate(#{$degrees}deg);
  -moz-transform: rotate(#{$degrees}deg);
  -ms-transform: rotate(#{$degrees}deg);
  -o-transform: rotate(#{$degrees}deg);
  transform: rotate(#{$degrees}deg);

  filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=#{cos($degrees)}, M12=-#{sin($degrees)}, M21=#{sin($degrees)}, M22=#{cos($degrees)})";
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=#{cos($degrees)}, M12=-#{sin($degrees)}, M21=#{sin($degrees)}, M22=#{cos($degrees)})";
  zoom: 1;
 }
