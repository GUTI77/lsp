1375648718
s:39374:"/* js/models/netsuite.js */
/* js/vendors/jqzoom/jqzoom.js */
/* js/controllers/plugins/zoom.js */
/* js/controllers/plugins/definitions.js */
/* js/controllers/plugins/validation.js */
/* js/controllers/reviews.js */
/* /productDetail.js */
/* js/models/netsuite.js */
(function(){

	var _util = window.LSP.utilities;
	var _models = window.LSP.models;
	_util.register('model', 'netsuite', (function(){

		var _this = $.extend({}, _models.api);

	return $.extend(_this, {
			_url : function(controller, payload){
				var url = 'https://forms.sandbox.netsuite.com/app/site/hosting/scriptlet.nl';
				url = (payload.method.match('getUPS') ? 'http://static.lonestarpercussion.com/shipping/' + payload.method : url);
				
				return url;
			},
			_payload : function(controller, payload){
				return $.extend(payload, {
					method : payload.method,
					deploy : '1',
					script : '25',
					h : '55cda7fb2a0d8a937f00',
					compid : '665798'
				});
			},
			request : function(controller, eventName, method, data){
				return this._request('GET', 'jsonp', controller, eventName, method, data);
			}
		});

	}()));
	

}());
/* js/vendors/jqzoom/jqzoom.js */
/*!
 * jQzoom Evolution Library v2.3  - Javascript Image magnifier
 * http://www.mind-projects.it
 *
 * Copyright 2011, Engineer Marco Renzi
 * Licensed under the BSD license.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the organization nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * Date: 03 May 2011 22:16:00
 */
(function ($) {
	//GLOBAL VARIABLES
	var isIE6 = ($.browser && $.browser.msie && $.browser.version < 7);
	var body = $(document.body);
	var window = $(window);
	var jqzoompluging_disabled = false; //disabilita globalmente il plugin
	//var timeoutId;
	$.fn.jqzoom = function (options) {
		return this.each(function () {
			var node = this.nodeName.toLowerCase();
			if (node == 'a') {
				new jqzoom(this, options);
			}
		});
	};
	jqzoom = function (el, options) {
		var api = null;
		api = $(el).data("jqzoom");
		if (api) return api;
		var obj = this;
		var settings = $.extend({}, $.jqzoom.defaults, options || {});
		obj.el = el;
		el.rel = $(el).attr('rel');
		//ANCHOR ELEMENT
		el.zoom_active = false;
		el.zoom_disabled = false; //to disable single zoom instance
		el.largeimageloading = false; //tell us if large image is loading
		el.largeimageloaded = false; //tell us if large image is loaded
		el.scale = {};
		el.timer = null;
		el.mousepos = {};
		el.mouseDown = false;
		$(el).css({
			'outline-style': 'none',
			'text-decoration': 'none'
		});
		//BASE IMAGE
		var img = $("img:eq(0)", el);
		el.title = $(el).attr('title');
		el.imagetitle = img.attr('title');
		var zoomtitle = ($.trim(el.title).length > 0) ? el.title : el.imagetitle;
		var smallimage = new Smallimage(img);
		var lens = new Lens();
		var stage = new Stage();
		var largeimage = new Largeimage();
		var loader = new Loader();
		//preventing default click,allowing the onclick event [exmple: lightbox]
		$(el).on('click.jqzoom', function (e) {
			e.preventDefault();
			return false;
		});
		//setting the default zoomType if not in settings
		var zoomtypes = ['standard', 'drag', 'innerzoom', 'reverse'];
		if ($.inArray($.trim(settings.zoomType), zoomtypes) < 0) {
			settings.zoomType = 'standard';
		}
		$.extend(obj, {
			create: function () { //create the main objects
				//create ZoomPad
				if ($(".zoomPad", el).length == 0) {
					el.zoomPad = $('<div/>').addClass('zoomPad');
					img.wrap(el.zoomPad);
				}
				if(settings.zoomType == 'innerzoom'){
					settings.zoomWidth  = smallimage.w;
					settings.zoomHeight  =   smallimage.h;
				}
				//creating ZoomPup
				if ($(".zoomPup", el).length == 0) {
					lens.append();
				}
				//creating zoomWindow
				if ($(".zoomWindow", el).length == 0) {
					stage.append();
				}
				//creating Preload
				if ($(".zoomPreload", el).length == 0) {
					loader.append();
				}
				//preloading images
				if (settings.preloadImages || settings.zoomType == 'drag' || settings.alwaysOn) {
					obj.load();
				}
				obj.init();
			},
			init: function () {
				//drag option
				if (settings.zoomType == 'drag') {
					$(".zoomPad", el).mousedown(function () {
						el.mouseDown = true;
					});
					$(".zoomPad", el).mouseup(function () {
						el.mouseDown = false;
					});
					document.body.ondragstart = function () {
						return false;
					};
					$(".zoomPad", el).css({
						cursor: 'default'
					});
					$(".zoomPup", el).css({
						cursor: 'move'
					});
				}
				if (settings.zoomType == 'innerzoom') {
					$(".zoomWrapper", el).css({
						cursor: 'crosshair'
					});
				}
				$(".zoomPad", el).on('mouseenter.jqzoom mouseover.jqzoom', function (event) {
					img.attr('title', '');
					$(el).attr('title', '');
					el.zoom_active = true;
					//if loaded then activate else load large image
					smallimage.fetchdata();
					if (el.largeimageloaded) {
						obj.activate(event);
					} else {
						obj.load();
					}
				});
				$(".zoomPad", el).bind('mouseleave.jqzoom', function (event) {
					obj.deactivate();
				});
				$(".zoomPad", el).bind('mousemove.jqzoom', function (e) {

					//prevent fast mouse mevements not to fire the mouseout event
					if (e.pageX > smallimage.pos.r || e.pageX < smallimage.pos.l || e.pageY < smallimage.pos.t || e.pageY > smallimage.pos.b) {
						lens.setcenter();
						return false;
					}
					el.zoom_active = true;
					if (el.largeimageloaded && !$('.zoomWindow', el).is(':visible')) {
						obj.activate(e);
					}
					if (el.largeimageloaded && (settings.zoomType != 'drag' || (settings.zoomType == 'drag' && el.mouseDown))) {
						lens.setposition(e);
					}
				});
				var thumb_preload = [];
				var i = 0;
				//binding click event on thumbnails
				var thumblist = [];
				thumblist = $('.zoom-thumbnails[data-targetZoomId=' + el.id + '] a');
				if (thumblist.length > 0) {
					//getting the first to the last
					var first = thumblist.splice(0, 1);
					thumblist.push(first);
				}
				thumblist.each(function () {
					//preloading thumbs
					if (settings.preloadImages) {
						thumb_preload[i] = new Image();
						thumb_preload[i].src = $(this).data('prezoomimage');
						i++;
					}
					$(this).click(function (e) {
						if($(this).hasClass('zoomThumbActive')){
						  return false;
						}
						thumblist.each(function () {
							$(this).removeClass('zoomThumbActive');
						});
						e.preventDefault();
						obj.swapimage(this);
						return false;
					});
				});
			},
			load: function () {
				if (el.largeimageloaded === false && el.largeimageloading === false) {
					var url = $(el).attr('href');
					el.largeimageloading = true;
					largeimage.loadimage(url);
				}
			},
			activate: function (e) {
				clearTimeout(el.timer);
				//show lens and zoomWindow
				el.timer = setTimeout(function(){
					lens.show();
					stage.show();
					$('.zoomWindow', el).bind('mouseenter', function(){
						obj.deactivate();
					});
				}, settings.delay);
				
			},
			deactivate: function (e) {
				clearTimeout(el.timer);
				switch (settings.zoomType) {
				case 'drag':
					//nothing or lens.setcenter();
					break;
				default:
					img.attr('title', el.imagetitle);
					$(el).attr('title', el.title);
					if (settings.alwaysOn) {
						lens.setcenter();
					} else {
						stage.hide();
						lens.hide();
					}
					break;
				}
				el.zoom_active = false;
			},
			swapimage: function (link) {
				el.largeimageloading = false;
				el.largeimageloaded = false;
				var smallimage = $(link).data('prezoomimage');
				var largeimage = $(link).attr('href');
				
				if (smallimage && largeimage) {
					
					$(link).addClass('zoomThumbActive');
					$(el).attr('href', largeimage);
					img.attr('src', smallimage);
					lens.hide();
					stage.hide();
					obj.load();
				} else {
					//alert('ERROR :: Missing parameter for largeimage or smallimage.');
					throw 'ERROR :: Missing parameter for largeimage or smallimage.';
				}
				return false;
			}
		});
		//sometimes image is already loaded and onload will not fire
		if (img[0].complete) {
			//fetching data from sallimage if was previously loaded
			smallimage.fetchdata();
			if ($(".zoomPad", el).length == 0) obj.create();
		}
/*========================================================,
|   Smallimage
|---------------------------------------------------------:
|   Base image into the anchor element
`========================================================*/

		function Smallimage(image) {
			var $obj = this;
			this.node = image[0];
			this.findborder = function () {
				var bordertop = 0;
				bordertop = image.css('border-top-width');
				btop = '';
				var borderleft = 0;
				borderleft = image.css('border-left-width');
				bleft = '';
				if (bordertop) {
					for (i = 0; i < 3; i++) {
						var x = [];
						x = bordertop.substr(i, 1);
						if (isNaN(x) == false) {
							btop = btop + '' + bordertop.substr(i, 1);
						} else {
							break;
						}
					}
				}
				if (borderleft) {
					for (i = 0; i < 3; i++) {
						if (!isNaN(borderleft.substr(i, 1))) {
							bleft = bleft + borderleft.substr(i, 1)
						} else {
							break;
						}
					}
				}
				$obj.btop = (btop.length > 0) ? eval(btop) : 0;
				$obj.bleft = (bleft.length > 0) ? eval(bleft) : 0;
			};
			this.fetchdata = function () {
				$obj.findborder();
				$obj.w = image.width();
				$obj.h = image.height();
				$obj.ow = image.outerWidth();
				$obj.oh = image.outerHeight();
				$obj.pos = image.offset();
				$obj.pos.l = image.offset().left + $obj.bleft;
				$obj.pos.t = image.offset().top + $obj.btop;
				$obj.pos.r = $obj.w + $obj.pos.l;
				$obj.pos.b = $obj.h + $obj.pos.t;
				$obj.rightlimit = image.offset().left + $obj.ow;
				$obj.bottomlimit = image.offset().top + $obj.oh;
				
			};
			this.node.onerror = function () {
				//alert('Problems while loading image.');
				throw 'Problems while loading image.';
			};
			this.node.onload = function () {
				$obj.fetchdata();
				if ($(".zoomPad", el).length == 0) obj.create();
			};
			return $obj;
		};
/*========================================================,
|  Loader
|---------------------------------------------------------:
|  Show that the large image is loading
`========================================================*/

		function Loader() {
			var $obj = this;
			this.append = function () {
				this.node = $('<div/>').addClass('zoomPreload').css('visibility', 'hidden').html(settings.preloadText);
				$('.zoomPad', el).append(this.node);
			};
			this.show = function () {
				this.node.top = (smallimage.oh - this.node.height()) / 2;
				this.node.left = (smallimage.ow - this.node.width()) / 2;
				//setting position
				this.node.css({
					top: this.node.top,
					left: this.node.left,
					position: 'absolute',
					visibility: 'visible'
				});
			};
			this.hide = function () {
				this.node.css('visibility', 'hidden');
			};
			return this;
		}
/*========================================================,
|   Lens
|---------------------------------------------------------:
|   Lens over the image
`========================================================*/

		function Lens() {
			var $obj = this;
			this.node = $('<div/>').addClass('zoomPup');
			//this.nodeimgwrapper = $("<div/>").addClass('zoomPupImgWrapper');
			this.append = function () {
				$('.zoomPad', el).append($(this.node).hide());
				if (settings.zoomType == 'reverse') {
					this.image = new Image();
					this.image.src = smallimage.node.src; // fires off async
					$(this.node).empty().append(this.image);
				}
			};
			this.setdimensions = function () {
				this.node.w = (parseInt((settings.zoomWidth) / el.scale.x) > smallimage.w ) ? smallimage.w : (parseInt(settings.zoomWidth / el.scale.x)); 
				this.node.h = (parseInt((settings.zoomHeight) / el.scale.y) > smallimage.h ) ? smallimage.h : (parseInt(settings.zoomHeight / el.scale.y)); 
				this.node.top = (smallimage.oh - this.node.h - 2) / 2;
				this.node.left = (smallimage.ow - this.node.w - 2) / 2;
				//centering lens
				this.node.css({
					top: 0,
					left: 0,
					width: this.node.w + 'px',
					height: this.node.h + 'px',
					position: 'absolute',
					display: 'none',
					borderWidth: 1 + 'px'
				});



				if (settings.zoomType == 'reverse') {
					this.image.src = smallimage.node.src;
					$(this.node).css({
						'opacity': 1
					});

					$(this.image).css({
						position: 'absolute',
						display: 'block',
						left: -(this.node.left + 1 - smallimage.bleft) + 'px',
						top: -(this.node.top + 1 - smallimage.btop) + 'px'
					});

				}
			};
			this.setcenter = function () {
				//calculating center position
				this.node.top = (smallimage.oh - this.node.h - 2) / 2;
				this.node.left = (smallimage.ow - this.node.w - 2) / 2;
				//centering lens
				this.node.css({
					top: this.node.top,
					left: this.node.left
				});
				if (settings.zoomType == 'reverse') {
					$(this.image).css({
						position: 'absolute',
						display: 'block',
						left: -(this.node.left + 1 - smallimage.bleft) + 'px',
						top: -(this.node.top + 1 - smallimage.btop) + 'px'
					});

				}
				//centering large image
				largeimage.setposition();
			};
			this.setposition = function (e) {
				el.mousepos.x = e.pageX;
				el.mousepos.y = e.pageY;
				var lensleft = 0;
				var lenstop = 0;

				function overleft(lens) {
					return el.mousepos.x - (lens.w) / 2 < smallimage.pos.l; 
				}

				function overright(lens) {
					return el.mousepos.x + (lens.w) / 2 > smallimage.pos.r; 
				   
				}

				function overtop(lens) {
					return el.mousepos.y - (lens.h) / 2 < smallimage.pos.t; 
				}

				function overbottom(lens) {
					return el.mousepos.y + (lens.h) / 2 > smallimage.pos.b; 
				}
				
				lensleft = el.mousepos.x + smallimage.bleft - smallimage.pos.l - (this.node.w + 2) / 2;
				lenstop = el.mousepos.y + smallimage.btop - smallimage.pos.t - (this.node.h + 2) / 2;
				if (overleft(this.node)) {
					lensleft = smallimage.bleft - 1;
				} else if (overright(this.node)) {
					lensleft = smallimage.w + smallimage.bleft - this.node.w - 1;
				}
				if (overtop(this.node)) {
					lenstop = smallimage.btop - 1;
				} else if (overbottom(this.node)) {
					lenstop = smallimage.h + smallimage.btop - this.node.h - 1;
				}
				
				this.node.left = lensleft;
				this.node.top = lenstop;
				var $node = $(this.node);
				var style = $node.attr('style');
				$node.attr('style',
					style
						.replace(/top:[-0-9. ]{1,}px/i, 'top:'+lenstop+'px')
						.replace(/left:[-0-9. ]{1,}px/i, 'left:'+lensleft+'px')
				);

				if (settings.zoomType == 'reverse') {
					if ($.browser.msie && $.browser.version > 7) {
						$(this.node).empty().append(this.image);
					}

					$(this.image).css({
						position: 'absolute',
						display: 'block',
						left: -(this.node.left + 1 - smallimage.bleft) + 'px',
						top: -(this.node.top + 1 - smallimage.btop) + 'px'
					});
				}
			   
				largeimage.setposition();
			};
			this.hide = function () {
				img.css({
					'opacity': 1
				});
				this.node.hide();
			};
			this.show = function () {  
				
				if (settings.zoomType != 'innerzoom' && (settings.lens || settings.zoomType == 'drag')) {
					this.node.show();
				}       

				if (settings.zoomType == 'reverse') {
					img.css({
						'opacity': settings.imageOpacity
					});
				}
			};
			this.getoffset = function () {
				var o = {};
				o.left = $obj.node.left;
				o.top = $obj.node.top;
				return o;
			};
			return this;
		};
/*========================================================,
|   Stage
|---------------------------------------------------------:
|   Window area that contains the large image
`========================================================*/

		function Stage() {
			var $obj = this;
			this.node = $("<div class='zoomWindow'><div class='zoomWrapper'><div class='zoomWrapperTitle'></div><div class='zoomWrapperImage'></div></div></div>");
			this.ieframe = $('<iframe class="zoomIframe" src="javascript:\\\\'\\\\';" marginwidth="0" marginheight="0" align="bottom" scrolling="no" frameborder="0" ></iframe>');
			this.setposition = function () {
				this.node.leftpos = 0;
				this.node.toppos = 0;
				if (settings.zoomType != 'innerzoom') {
					//positioning
					switch (settings.position) {
					case "left":
						this.node.leftpos = (smallimage.pos.l - smallimage.bleft - Math.abs(settings.xOffset) - settings.zoomWidth > 0) ? (0 - settings.zoomWidth - Math.abs(settings.xOffset)) : (smallimage.ow + Math.abs(settings.xOffset));
						this.node.toppos = settings.yOffset; // LSP Removed abs
						break;
					case "top":
						this.node.leftpos = Math.abs(settings.xOffset);
						this.node.toppos = (smallimage.pos.t - smallimage.btop - Math.abs(settings.yOffset) - settings.zoomHeight > 0) ? (0 - settings.zoomHeight - Math.abs(settings.yOffset)) : (smallimage.oh + Math.abs(settings.yOffset));
						break;
					case "bottom":
						this.node.leftpos = Math.abs(settings.xOffset);
						this.node.toppos = (smallimage.pos.t - smallimage.btop + smallimage.oh + Math.abs(settings.yOffset) + settings.zoomHeight < screen.height) ? (smallimage.oh + Math.abs(settings.yOffset)) : (0 - settings.zoomHeight - Math.abs(settings.yOffset));
						break;
					default:
						this.node.leftpos = (smallimage.rightlimit + Math.abs(settings.xOffset) + settings.zoomWidth < screen.width) ? (smallimage.ow + Math.abs(settings.xOffset)) : (0 - settings.zoomWidth - Math.abs(settings.xOffset));
						this.node.toppos = settings.yOffset; // LSP Removed abs
						break;
					}
				}
				this.node.css({
					'left': this.node.leftpos + 'px',
					'top': this.node.toppos + 'px'
				});
				return this;
			};
			this.append = function () {
				$('.zoomPad', el).append(this.node);
				this.node.css({
					position: 'absolute',
					display: 'none',
					zIndex: 5001
				});
				if (settings.zoomType == 'innerzoom') {
					this.node.css({
						cursor: 'default'
					});
					var thickness = (smallimage.bleft == 0) ? 1 : smallimage.bleft;
					$('.zoomWrapper', this.node).css({
						borderWidth: thickness + 'px'
					});    
				}
				
				  $('.zoomWrapper', this.node).css({
					  width: Math.round(settings.zoomWidth) + 'px' ,
					  borderWidth: thickness + 'px'
				  });
				  $('.zoomWrapperImage', this.node).css({
					  width: '100%',
					  height: Math.round(settings.zoomHeight) + 'px'
				  });
				  //zoom title
				 $('.zoomWrapperTitle', this.node).css({
						width: '100%',
						position: 'absolute'
				  });  
			  
				$('.zoomWrapperTitle', this.node).hide();
				if (settings.title && zoomtitle.length > 0) {
					$('.zoomWrapperTitle', this.node).html(zoomtitle).show();
				}
				$obj.setposition();
			};
			this.hide = function () {
				switch (settings.hideEffect) {
				case 'fadeout':
					this.node.fadeOut(settings.fadeoutSpeed, function () {});
					break;
				default:
					this.node.hide();
					break;
				}
				this.ieframe.hide();
			};
			this.show = function () {
				switch (settings.showEffect) {
				case 'fadein':
					this.node.fadeIn();
					this.node.fadeIn(settings.fadeinSpeed, function () {});
					break;
				default:
					this.node.show();
					break;
				}
				if (isIE6 && settings.zoomType != 'innerzoom') {
					this.ieframe.width = this.node.width();
					this.ieframe.height = this.node.height();
					this.ieframe.left = this.node.leftpos;
					this.ieframe.top = this.node.toppos;
					this.ieframe.css({
						display: 'block',
						position: "absolute",
						left: this.ieframe.left,
						top: this.ieframe.top,
						zIndex: 99,
						width: this.ieframe.width + 'px',
						height: this.ieframe.height + 'px'
					});
					$('.zoomPad', el).append(this.ieframe);
					this.ieframe.show();
				};
			};
		};
/*========================================================,
|   LargeImage
|---------------------------------------------------------:
|   The large detailed image
`========================================================*/

		function Largeimage() {
			var $obj = this;
			this.node = new Image();
			this.loadimage = function (url) {
				//showing preload
				loader.show();
				this.url = url;
				this.node.style.position = 'absolute';
				this.node.style.border = '0px';
				this.node.style.display = 'none';
				this.node.style.left = '-5000px';
				this.node.style.top = '0px';
				document.body.appendChild(this.node);
				this.node.src = url; // fires off async
			};
			this.fetchdata = function () {
				var image = $(this.node);
				var scale = {};
				this.node.style.display = 'block';
				$obj.w = image.width();
				$obj.h = image.height();
				$obj.pos = image.offset();
				$obj.pos.l = image.offset().left;
				$obj.pos.t = image.offset().top;
				$obj.pos.r = $obj.w + $obj.pos.l;
				$obj.pos.b = $obj.h + $obj.pos.t;
				scale.x = ($obj.w / smallimage.w);
				scale.y = ($obj.h / smallimage.h);
				el.scale = scale;
				document.body.removeChild(this.node);
				$('.zoomWrapperImage', el).empty().append(this.node);
				//setting lens dimensions;
				lens.setdimensions();
			};
			this.node.onerror = function () {
				//alert('Problems while loading the big image.');
				throw 'Problems while loading the big image.';
			};
			this.node.onload = function () {
				//fetching data
				$obj.fetchdata();
				loader.hide();
				el.largeimageloading = false;
				el.largeimageloaded = true;
				if (settings.zoomType == 'drag' || settings.alwaysOn) {
					lens.show();
					stage.show();
					lens.setcenter();
				}
			};
			this.setposition = function () {
				var left = -el.scale.x * (lens.getoffset().left - smallimage.bleft + 1);
				var top = -el.scale.y * (lens.getoffset().top - smallimage.btop + 1);
				$(this.node).css({
					'left': left + 'px',
					'top': top + 'px'
				});
			};
			return this;
		};
		$(el).data("jqzoom", obj);
	};
	//es. $.jqzoom.disable('#jqzoom1');
	$.jqzoom = {
		defaults: {
			zoomType: 'standard',
			//innerzoom/standard/reverse/drag
			zoomWidth: 300,
			//zoomWindow  default width
			zoomHeight: 300,
			//zoomWindow  default height
			xOffset: 10,
			//zoomWindow x offset, can be negative(more on the left) or positive(more on the right)
			yOffset: 0,
			//zoomWindow y offset, can be negative(more on the left) or positive(more on the right)
			position: "right",
			//zoomWindow default position
			preloadImages: true,
			//image preload
			preloadText: 'Loading zoom',
			title: true,
			lens: true,
			imageOpacity: 0.4,
			alwaysOn: false,
			showEffect: 'show',
			//show/fadein
			hideEffect: 'hide',
			//hide/fadeout
			fadeinSpeed: 'slow',
			// ms to wait before opening
			delay : 500,
			//fast/slow/number
			fadeoutSpeed: '2000' //fast/slow/number
		},
		disable: function (el) {
			var api = $(el).data('jqzoom');
			api.disable();
			return false;
		},
		enable: function (el) {
			var api = $(el).data('jqzoom');
			api.enable();
			return false;
		},
		disableAll: function (el) {
			jqzoompluging_disabled = true;
		},
		enableAll: function (el) {
			jqzoompluging_disabled = false;
		}
	};
})(jQuery);
/* js/controllers/plugins/zoom.js */

/* js/controllers/plugins/definitions.js */
(function(){
	
	var _util = window.LSP.utilities;
	
	var definitions = (function(){
		var _this = {};
		var _lsp = window.LSP;
		var _api = _lsp.models.netsuite;
		var _settings = {
				sluglessSelector : '*[data-def]:not([data-definitions-slug]):not([data-definitions-definition])',
				definitionlessSelector : '*[data-def][data-definitions-slug]:not([data-definitions-definition])',
				parsedSelector : '*[data-def][data-definitions-definition]'
			};
		
		_this =  {
			name : 'definitions',
			events : {
				definitions : {
					onAfterAPICallFailure : function(e, data){
						// Remove the lightning bolt - there was a failure
						$('*[data-def]').removeAttr('data-def');
					}
				},
				application : {
					onAttachEvents : function(e, data){
						// Make our list of slugs to request
						var slugs = [];
						$(_settings.sluglessSelector, data.selector).each(function(index, element){
							
							// Add slug to all definitions that don't already have it
							// we will attach the definition to them after they return
							// from the server
							$(this).attr('data-definitions-slug',  _this.makeSlug($(this).html()));
							
							slugs.push($(this).data('definitions-slug'));
						});
						
						// Request them, and set up the parser for when they return
						$.when(_this.getDefinitions(slugs)).done(function(response){
							if(response && response.response && response.response.data){
								_this.parseDefinitions(response.response.data, data.selector);
							}
						});
					}
				}
			},
			
			assets : {},
			
			getDefinitions : function(slugs){
				if(slugs.length > 0){
					return _api.request(_this, 'getDefinitions', {method : 'getDefinitions', slugs : JSON.stringify(slugs)});
				}
			},
			
			parseDefinitions : function(definitions, selector){
				$(_settings.definitionlessSelector, selector).each(function(index, element){
					// Not the most elegant -- but because neither array will be very big, it shouldn't
					// ever be a performance problem
					for(var i = 0; i < definitions.length; i++){ // Loop, and add word/definition pairs to definition slugs
						if(definitions[i].custrecordslug === $(this).data('definitions-slug')){
							var selector = $(this);
							selector.attr('data-definitions-title', definitions[i].name) // we are using attr and not data because they are CSS hooks
								.attr('data-definitions-definition', definitions[i].custrecorddefinition)
								.attr('data-definitions-url', definitions[i].custrecordurl)
								.attr('data-definitions-imageurl', definitions[i].custrecordimageurl);
								
							selector.append(_util.parseMicroTemplate('templates-definitons-display', selector.data()));
							
							selector.bind('mouseenter', function(){
								_this.showDefinition(this); 
							}).bind('mouseleave', function(){
								_this.hideDefinition(this);
							}).bind('click', function(){
								_this.toggleDefinition(this);
							});
						}
					}
				});
			},
			
			hideDefinition : function(element){
				$('.panel', element).hide();
			}, // These work, but if we can do it in CSS with :hover -- all the better
			
			showDefinition : function(element){
				$('.panel', element).show();
			},

			toggleDefinition : function(element){
				if($('.panel', element).is(':visible')){
					$('.panel', element).hide();
				}else{
					$('.panel', element).show();
				}
			},
			
			makeSlug : function(content){
				return content.toLowerCase().replace(/[ ]+/g, '-').replace(/[^\\\\w\\\\-]/g, '');   
			}
		};

		return _this;
	}());
	
	_util.register('controller', 'definitions', definitions);
	
}());
/* js/controllers/plugins/validation.js */
(function(){
	
	var _util = window.LSP.utilities;
	
	var validation = (function(){
		var _this = {};
		var _app = window.LSP;
		var _api = _app.models.api;
		var _settings = {
			validationInputs : '*[class*="validation-"]:input'	
		};
		var _patterns = {
			required : {
				defaultMessage : 'This field is required',
				pattern : /^.+/
			},
			alphaOnly : {
				defaultMessage : 'Letters only',
				pattern : /^[A-Za-z]*$/
			},
			numericOnly : {
				defaultMessage : 'Numbers only',
				pattern : /^[0-9]*$/
			},
			alphaNumeric : {
				defaultMessage : 'Numbers, letters, and spaces only',
				pattern : /[A-Za-z ]*/
			},
			emailAddress : {
				defaultMessage : 'This dosen\\\\'t look like an email address',
				pattern : /^[a-zA-Z0-9_\\\\-\\\\.]{2,}@[a-zA-Z0-9_\\\\-\\\\.]{2,}\\\\.[a-zA-Z]{2,}$/
			},
			creditCardNumber : {
				defaultMessage : 'Invalid credit card number',
				pattern : /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\\\d{3})\\\\d{11})$/
			}
		};
		
		_this =  {
			name : 'validation',
			events : {
				application : {
					onAttachEvents : function(e, data){
			 
						$(_settings.validationInputs, data.selector).each(function(index, element){
							$(element).off('validation').on('keyup.lsp.validation', function(e){
								if(e.which !== 9 && e.which !== 16 && e.which !== 13){
									_this.validate(element);
								}
								return true;
							});
							//_this.validate(element); // Not sure if we want to validate on page load or not yet.
						});
						
						$('form', data.selector).off('validation').on('submit.lsp.validation', function(e){
							
							var isValid = _this.validateForm($(this));
							
							if(!isValid){
								e.preventDefault();
								return false;
							}
							
							$(this).triggerHandler('afterValidation');
							return true;
						
						});
					}
				}
			},
			assets : {},
			
			getValidationMessage : function(element, validationType){
				var elementMessage = $(element).data('validation-message-'+validationType);
				var defaultMessage = _patterns[validationType].defaultMessage;
				
				return (elementMessage ? elementMessage : defaultMessage);
			},

			getPattern : function(validationType){
				if(!!_patterns[validationType]){
					return _patterns[validationType];
				}else{
					throw new Error(validationType + ' is an invalid validation type');
				}
			},
			
			isValid : function(string, validationType){
				return _this.getPattern(validationType).pattern.test(string);
			},

			validateForm : function(form){
				var stop = false;
				var inputs = $(_settings.validationInputs, form);
				for(var i = 0; i < inputs.length; i++){
					if(!_this.validate(inputs[i])){
						stop = true;
					}
				}

				if(stop === true){
					_util.scrollTo(form);
				}
				
				return !stop;
			},
			
			// Parse, then display any validating messages
			validate : function(element){
				$(element).removeClass('validation-valid', 'validation-invalid');

				var invalidTypes = _this.parseInvalid($(element).val(), $(element).attr('class').split(/\\\\s+/));
				if(invalidTypes.length > 0){
					_this.displayInvalid(element, invalidTypes);
					return false;
				}
				
				_this.displayValid(element);
				return true;
			},
			
			// Create the list of invalid types
			parseInvalid : function(value, validationTypes){
				var invalidTypes = [];
				for(var i = 0; i < validationTypes.length; i++){
					if(validationTypes[i].indexOf('validation-') > -1 && validationTypes[i] !== 'validation-valid' && validationTypes[i] !== 'validation-invalid') {
						var validationType = validationTypes[i].replace('validation-', '');
						var patternObj = _this.getPattern(validationType);
						// Unless it's required, allow a empty string to validate
						if(!value.match(patternObj.pattern) && ((value !== '' && validationType !== 'required') || validationType === 'required')){
							invalidTypes.push(validationType);
						}
					}
				}
				
				return invalidTypes;
			},
			
			displayInvalid : function(element, invalidTypes){
				
				var parent = $(element).parent('.validation-container');

				if(!parent.length){
					var parent = $(element).parent().addClass('validation-container');
					//_app.controllers.application.attachEvents(parent);
				}

				parent.attr('data-validation-invalidTypes', invalidTypes.join(' '));
			},

			displayValid : function(element){
				$(element).parent('.validation-container').removeAttr('data-validation-invalidTypes');

				// .removeClass('validation-invalid');
				// $(element).addClass('validation-valid').parent('.validation-container').addClass('validation-valid');
			}
		};

		return _this;

	}());
	
	_util.register('controller', 'validation', validation);
	
}());
/* js/controllers/reviews.js */
(function(){
	
	var _util = window.LSP.utilities;
	
	_util.register('controller', 'reviews', (function(){
		var _this = {};
		var _app = window.LSP;
		var _api = _app.models.netsuite;
		var _settings = {
			containerSelector : '#addReviewForm',
			formSelector : '#reviews-inputForm',
			prosInputSelector : '#reviews-inputForm .pros input',
			consInputSelector : '#reviews-inputForm .cons input',
			reviewTemplateId : 'templates-reviewEntry',
			previewSelector : '#previewReview'
		};
		
		_this =  {
			name : 'reviews',
			events : {
				reviews : {
					onAfterAPICallSuccess : function(e, data){
						$(_settings.formSelector).removeClass('loading');
						$('#reviewEntries').removeClass('loading secondary');

						// Close the add-review form
						$('button.b1.reveal-open[data-reveal-children*="addReviewForm"]').trigger('click');
						$(':input', _settings.formSelector).removeAttr('disabled');

					},
					onBeforeAPICall : function(e, data){
						$(_settings.formSelector).addClass('loading');
						$('#reviewEntries').addClass('loading secondary');
						$(':input', _settings.formSelector).attr('disabled');
					},
					onSave : function(e, data){
						var form = data.selector[0];
						if(_app.controllers.validation.validateForm(form)){
							_this.save(_this.parseForm(form));
						}
					},
					onProOrConInput : function(e){
						// If there is something in the input, show the second one
						if(e.currentTarget.value.length > 0){
							$(e.currentTarget).parent().next().show();

						// If the current one is empty, AND the next one is too, hide the second one
						}else if($(e.currentTarget).parent().next().length &&
								($(e.currentTarget).parent().next().children('input').val() || '').length < 1){ // the previous one is empty

							$(e.currentTarget).parent().next().hide();

						// If the current one is empty, and no longer has focus, and isn't the first one, hide it
						}else if(!$(e.currentTarget).is(':focus') &&
								!$(e.currentTarget).parent().is(':nth-of-type(1)') &&
								$(e.currentTarget).parent().prev().children().val().length < 1){
							$(e.currentTarget).parent().hide();
						}
					},
					// onAddedBodyContent : function(){
						
					//	var startHeight = $(this).height();
					//	return function(e){
					//		var textHeight = $(this).scrollTop();
					//		var newHeight = $(this).height() + textHeight;
					//		if(newHeight > startHeight){
					//			$(this).css('height',(newHeight + 'px'));
					//		}else{
					//			$(this).css('height', startHeight);
					//		}
						
					//	};
					// },
					onRenderPreview : function(e){
						$(_settings.previewSelector).html(_this.render(_this.parseForm(e.currentTarget.form)));
					}
				},
				application : {
					onAttachEvents : function(e, data){

						$(_settings.formSelector+' :input', data.selector)
							.off('.reviews')
							.on('keyup.lsp.reviews change.lsp.reviews', _this.events.reviews.onRenderPreview)
								.filter('input[type="checkbox"], input[type="radio"], select')
								.on('click.lsp.reviews change.lsp.reviews', _this.events.reviews.onRenderPreview);

						// $(_settings.formSelector+' textarea', data.selector)
						//	.on('keyup.lsp.reviews', _this.events.reviews.onAddedBodyContent()); // returns a function

						$(_settings.prosInputSelector+', '+_settings.consInputSelector, data.selector)
							.on('keyup.lsp.reviews change.lsp.reviews', _this.events.reviews.onProOrConInput);
					}
				}
			},
			assets : {},
			
			// Send the form, and replace the form with the result from the 
			// server.
			// save : function(formElement){
			// 	var data = _this.parseForm(formElement); // We have to parse the form before we disable the elements
			// 	$(':input', formElement).attr('disabled', true);
				
			// 	var result = $.when(_api.request(_this, 'save', 'saveReview', data))
			// 	.done(function(data){
			// 		// don't forget to _util.attachEvents with the new HTML!
			// 		$(_settings.formSelector).replaceWith(JSON.stringify(data));
			// 	}).always(function(data){
			// 		$(':input', formElement).attr('disabled', false);
			// 	});
				
			// 	return result;
				
			// },

			save : function(reviewData){
				return _api.request(_this, 'saveReview', {method : 'saveReview', data : JSON.stringify(reviewData)})
					.done(function(data){
						_this.renderSavedReview(reviewData);
					});
			},
			
			render : function(data){
				var html = _util.parseMicroTemplate(_settings.reviewTemplateId, data);
				return html;
			},

			renderSavedReview : function(review){
				
				_util.scrollTo($('.reviews.section'));

				$('ul.entries')
					.addClass('saved');

			},

			// Take the form, JSON encode the profile section, perform
			// other pre-save functions, and return the data
			parseForm : function(element){
				
				var returnData;
				var profile = [];
				
				returnData = _util.formToObject(element, null, true);

				// This is ancient code - the original plan was to store data in fields, and change
				// the review script as little as possible - but now we use a json object to handle it
				// so with some cleanup, this could be removed (move this logic to the template)
				for(var i = 0; i < ((returnData || {}).custrecordreviewprofile || {}).length; i++){
					
					if(returnData.custrecordreviewprofile[i].title){
						var years = '';
						if(returnData.custrecordreviewprofile[i].time > 0){
							var pluralString = (returnData.custrecordreviewprofile[i].time > 1 ? 's' : '');
							years = '&nbsp;('+ returnData.custrecordreviewprofile[i].time + '&nbsp;yr' + pluralString + ')';
						}
						profile.push(returnData.custrecordreviewprofile[i].title + years);
					}
				}
				returnData.profile = profile.join(', ');

				return returnData;
			}
		};

		return _this;
	})());
	
})();
/* /productDetail.js */
";
