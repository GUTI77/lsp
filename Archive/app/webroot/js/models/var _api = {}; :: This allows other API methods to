var _api = {}; // This allows other API methods to call one another
_api = {
	getTrackingNumber : function(requestParameters){
		
		if(!!requestParameters.search){ // We need one or the other
			
			var filterExpression = [				
				['mainline', 'is', 'T'],
				'and',
				['trackingnumbers', 'isnotempty', null],
				'and',
				[
					['email', 'contains', requestParameters.search],
					//		'or',
					//['number', 'is', requestParameters.search],
				],

			];
 
			var columns = [new nlobjSearchColumn('trackingnumbers'),
						   new nlobjSearchColumn('trandate'),
						   new nlobjSearchColumn('internalid'),
						   new nlobjSearchColumn('number')];
			
			columns[1].setSort(true); // Sort by the date, desending
			var trackingNumbers = _util.convertToSimpleArray(new nlapiSearchRecord('salesorder', null, filterExpression, columns));
			if(trackingNumbers[0]){
				return trackingNumbers[0];
			}
		}
		
		return false;
		
	  },
	getMatrixOptions : function(requestParameters){ // {parentId : 123}
		
		var matrixSummary = _api.getMatrixChildrenSummary(requestParameters);
		var selectOptions = (matrixSummary.length > 0 ? {} : null);
		var transactionOptionsToMatrixOptions = _util.getWebsiteAttributes('Matrix');
		var selectOptionsByItem = [];
				
		for(var j = 0; j < transactionOptionsToMatrixOptions.length; j++){
			
			var transactionColumn = transactionOptionsToMatrixOptions[j];
			
			for(var i = 0; i < matrixSummary.length; i++){
				
				var child = matrixSummary[i];
				var matrixOption = transactionColumn.custrecord_fieldid;
				
				if(child[matrixOption]){
					
					var internalId = parseInt(child.internalid.value);
					var fieldLabel = transactionColumn.custrecordlabel;
					var name = (child[matrixOption].text ? child[matrixOption].text : child[matrixOption].value);
					var value = child[matrixOption].value;
					var imageUrl = child.custitemimage_1_url;
					var mpn = child.mpn;
					var onlinePrice = child.onlineprice;
					var msrp = child.price;
					var stockMessage = (child.type.value === 'InvtPart' ? child.custiteminvstockmessage : child.custitemkitstockmessage);
					
					// Build item-centered object
					selectOptionsByItem.push([internalId, fieldLabel + '|' + name + '|' + i + '|' + imageUrl + '|' + mpn + '|' + onlinePrice + '|' + msrp + '|' + stockMessage + '|' + ((child.custitembadge || {}).text || "") + '|' + ((child.custitemspecialfeaturebadge || {}).text || "")]);
					
					// Build select summary object
					selectOptions[transactionColumn.custrecord_transactionfieldid] = selectOptions[transactionColumn.custrecord_transactionfieldid] || {};
					selectOptions[transactionColumn.custrecord_transactionfieldid].transactionField = transactionColumn.custrecord_transactionfieldid;
					selectOptions[transactionColumn.custrecord_transactionfieldid].label = fieldLabel;
					selectOptions[transactionColumn.custrecord_transactionfieldid].options = selectOptions[transactionColumn.custrecord_transactionfieldid].options || [];
					
					// If the label hasn't already been added
					if(!_util.inArray(selectOptions[transactionColumn.custrecord_transactionfieldid].options, function(e){
						return e.name === name;
					})){
						selectOptions[transactionColumn.custrecord_transactionfieldid].options.push({
							value : value,
							name : name,
							swatch : child.custitemimage_1_url || '',
							mpn : mpn,
							availablity : child[matrixOption].quantityavailable || 0});
					}
				}
			}
		}
		
		return {options : selectOptions, summaryString : JSON.stringify(selectOptionsByItem)};
		
	},
	getMatrixChildrenSummary : function(requestParameters){ // {parentId : 123}
		
		var filters = [new nlobjSearchFilter('parent', null, 'is', requestParameters.parentId),
					   new nlobjSearchFilter('isonline', null, 'is', 'T'),
					   new nlobjSearchFilter('isinactive', null, 'is', 'F')];
		var columns = [new nlobjSearchColumn('custitemimage_1_url'),
					   new nlobjSearchColumn('quantityavailable'),
					   new nlobjSearchColumn('internalid').setSort(false),
					   new nlobjSearchColumn('onlineprice'),
					   new nlobjSearchColumn('price'),
					   new nlobjSearchColumn('mpn'),
					   new nlobjSearchColumn('custitemkitstockmessage'),
					   new nlobjSearchColumn('custiteminvstockmessage'),
					   new nlobjSearchColumn('type'),
					   new nlobjSearchColumn('custitemspecialfeaturebadge'),
					   new nlobjSearchColumn('custitembadge')];
		
		var transactionOptionsToMatrixOptions = _util.getWebsiteAttributes('Matrix');
		
		for(var i = 0; i < transactionOptionsToMatrixOptions.length; i++){
			columns.push(new nlobjSearchColumn(transactionOptionsToMatrixOptions[i].custrecord_fieldid));
		}
		var itemRecords = new nlapiSearchRecord('item', null, filters, columns) || [];
		var simpleObjectItemRecords = _util.convertToSimpleArray(itemRecords);
		
		return simpleObjectItemRecords;
		return [];
		
	},
	getDefinitions : function(requestParameters){ // {slugs : ['this-is-the-slug', 'this-is-another-slug']}
		//try{
			requestParameters.slugs = JSON.parse(requestParameters.slugs);
			var filters = [];
			for(var i = 0; i < requestParameters.slugs.length; i++){
				filters.push(['custrecordslug', 'is', requestParameters.slugs[i]]);
				(i + 1 < requestParameters.slugs.length ? filters.push('or') : null); // No hanging operators
			}
			var columns = [new nlobjSearchColumn('custrecorddefinition'),
						   new nlobjSearchColumn('custrecordslug'),
						   new nlobjSearchColumn('custrecordurl'),
						   new nlobjSearchColumn('custrecordimageurl'),
						   new nlobjSearchColumn('name')];
			var definitionRecords = new nlapiSearchRecord('customrecordlightboltdefinitions', null, filters, columns) || [];
			var definitionsSimpleArray = _util.convertToSimpleArray(definitionRecords) || [];
			
			return definitionsSimpleArray;
//	    	
//    	}catch(e){
//    		return false;
//    	};
	},
	getSpecifications : function(requestParameters){ // id : 123
		return _api.getItems({ids : [requestParameters.id]}, ['Specifications']);
	},
	getItems : function(requestParameters, explicitAttributeGroups){ // {ids : [123, 312, 141, 214]}
		try{
			requestParameters.ids = (typeof requestParameters.ids === 'string' ? JSON.parse(requestParameters.ids) : requestParameters.ids);
			if(requestParameters.ids.length > 0){
				var filters = [];
				for(var i = 0; i < requestParameters.ids.length; i++){
					if(!isNaN(parseFloat(requestParameters.ids[i])) && isFinite(requestParameters.ids[i])){
						filters.push(['internalid', 'is', requestParameters.ids[i]]);
						(i + 1 < requestParameters.ids.length ? filters.push('or') : null); // No hanging operators
					}
				}
				
				// Do a quick request to get the columns we want to display
				var displayColumns = _util.getWebsiteAttributes((explicitAttributeGroups ? explicitAttributeGroups : ['Compare', 'Specifications']));
				var columns = [new nlobjSearchColumn('internalid'),
							   new nlobjSearchColumn('urlcomponent')];
				for(var i = 0; i < displayColumns.length; i++){
					columns.push(new nlobjSearchColumn(displayColumns[i].custrecord_fieldid));
				}
				
				var itemRecords = new nlapiSearchRecord('item', null, filters, columns) || [];
				var simpleObjectItemRecords = _util.convertToSimpleArray(itemRecords);
				
				// Add matrix options as private field, make internalid private
				for(var i = 0; i < simpleObjectItemRecords.length; i++){
					var options = _api.getMatrixOptions({parentId : simpleObjectItemRecords[i].internalid.value});
					if(options){
						simpleObjectItemRecords[i]._matrixOptions = options;
					}
					simpleObjectItemRecords[i]._internalid = simpleObjectItemRecords[i].internalid;
					simpleObjectItemRecords[i]._urlcomponent = simpleObjectItemRecords[i].urlcomponent;
					delete simpleObjectItemRecords[i].internalid;
					delete simpleObjectItemRecords[i].urlcomponent;
				}
				
				// Loop through the columns and the results
				for(var i = 0; i < displayColumns.length; i++){
					for(var j = 0; j < simpleObjectItemRecords.length; j++){
						// Let's rename the labels
						if(simpleObjectItemRecords[j][displayColumns[i].custrecord_fieldid] && displayColumns[i].custrecordlabel){
							simpleObjectItemRecords[j][displayColumns[i].custrecordlabel] = simpleObjectItemRecords[j][displayColumns[i].custrecord_fieldid];
							delete simpleObjectItemRecords[j][displayColumns[i].custrecord_fieldid];
						}
					}
				}
				
				return simpleObjectItemRecords;
			}
			
			throw "IDs is required";
			
		}catch(e){
			return false;
		};
	},
	saveReview : function(requestParameters){
		
		var newReview = nlapiCreateRecord('customrecordreviewentry');
		var data = JSON.parse(requestParameters.data);
		var validFields = {
			'title' : 'custrecordreviewtitle',
			'body' : 'custrecordreviewmessage',
			'location' : 'custrecordreviewlocation',
			'name' : 'custrecordreviewreviewer',
			'rating' : 'custrecordreviewrating',
			'custrecordreviewnsitemid' : 'custrecordreviewnsitemid'
		};
		
		for(var key in data){
			if(validFields.hasOwnProperty(key)){
				//nlapiLogExecution('debug', key, validFields[key]);
				newReview.setFieldValue(validFields[key], data[key]);
			}
		}
		
		
		// Save the leftovers in additional data
		newReview.setFieldValue('custrecordadditionaldatajson', JSON.stringify(data));
		newReview.setFieldValue('custrecordreviewreviewer', data.firstName + " " + data.lastInitial);
		var reviewId = nlapiSubmitRecord(newReview, null, true);
 
		// If there is a review id - return an object, otherwise return false (failure)
		return (!!reviewId ? {reviewId : reviewId} : false);
	
	},
	
	addItemToWishlist : function(requestParameters){ // {itemId : itemId, customerId : 123, quantity : 12, options : options, comments : 'hey'}
		
		var item = requestParameters.itemId;
		var customer = requestParameters.customerId;
		var quantity = requestParameters.quantity || 1;
		var site = requestParameters.site;
		var options = requestParameters.options || '';
		var comments = requestParameters.comments || '';
		var lineId = false;
		
		var filters = [new nlobjSearchFilter("custrecord_wishlist_customer", null, "is", customer),
					   new nlobjSearchFilter("custrecord_wishlist_item", null, "is", item)];
					   (options && options != "" ? filters.push(new nlobjSearchFilter("custrecord_wishlist_options", null, "is", options)) : null);
		
		var itemInWishlist = new nlapiSearchRecord("customrecord_wishlist", "customsearch_search_wishlist", filters, null);
		if (itemInWishlist && itemInWishlist.length > 0)	{
			return _api.updateItemOnWishlist(requestParameters);
		}else{
			
			var newWishlist = nlapiCreateRecord("customrecord_wishlist");
			
			newWishlist.setFieldValue("custrecord_wishlist_site", site);
			newWishlist.setFieldValue("custrecord_wishlist_customer", customer);
			newWishlist.setFieldValue("custrecord_wishlist_item", item);
			newWishlist.setFieldValue("custrecord_wishlist_quantity", quantity);
			newWishlist.setFieldValue("custrecord_wishlist_options", options);
			newWishlist.setFieldValue("custrecord_wishlist_comments", comments);
			
			lineId = nlapiSubmitRecord(newWishlist);
		}
		
		return (!!lineId ? {lineId : lineId} : false);
	},

	removeItemFromWishlist : function(requestParameters){ // {customerId : customer, options : options, itemId : itemId}
		
		var customer = requestParameters.customerId;
		var options = requestParameters.options;
		var item = requestParameters.itemId;
		
		var filters = [new nlobjSearchFilter("custrecord_wishlist_customer", null, "is", customer),
					   new nlobjSearchFilter("custrecord_wishlist_item", null, "is", item)];
					   (options && options != "" ? filters.push(new nlobjSearchFilter("custrecord_wishlist_options", null, "is", options)) : null);
		
		var itemInWishlist = new nlapiSearchRecord("customrecord_wishlist", "customsearch_search_wishlist", filters, null);
		if (itemInWishlist && itemInWishlist.length > 0){
			nlapiDeleteRecord('customrecord_wishlist', itemInWishlist[0].getId());
			return true;
		}
		
		return false;
	},
	
	updateItemOnWishlist : function(requestParameters){ //{itemId : itemId, customerId : customerId, options : options, value : value, field : field}
		var item = requestParameters.itemId;
		var customer = requestParameters.customerId;
		var options = requestParameters.options;
		var quantity = requestParameters.quantity || 1;
		var comments = requestParameters.comments || '';
		var status = requestParameters.status;
		var site = requestParameters.site;
		var lineId = false;
		
	
		var filters = [new nlobjSearchFilter("custrecord_wishlist_customer", null, "is", customer),
					   new nlobjSearchFilter("custrecord_wishlist_item", null, "is", item)];
		if(options && options != "")
			filters.push(new nlobjSearchFilter("custrecord_wishlist_options", null, "is", options));
		
		var itemInWishlist = new nlapiSearchRecord("customrecord_wishlist", "customsearch_search_wishlist", filters, null);
		if (itemInWishlist && itemInWishlist.length > 0)	{
			var wishlist = nlapiLoadRecord("customrecord_wishlist", itemInWishlist[0].getId());
			
			wishlist.setFieldValue("custrecord_wishlist_site", site);
			wishlist.setFieldValue("custrecord_wishlist_customer", customer);
			wishlist.setFieldValue("custrecord_wishlist_quantity", quantity);
			wishlist.setFieldValue("custrecord_wishlist_comments", comments);
			
			lineId = nlapiSubmitRecord(wishlist);
		}
			
		if(status){ // If it's not status - update the item
			loadedCustomer = nlapiLoadRecord("customer", customer),
			priceLevel = loadedCustomer.getFieldValue("pricelevel");
			loadedCustomer.setFieldValue("custentity_public_wishlist", status);
			
			lineId = nlapiSubmitRecord(loadedCustomer, true, false);
		}
		
		return (!!lineId ? {lineId : lineId} : false);
		
	},
	
	getWishlistItems : function(requestParameters){ // {customerId : customerId}
		
		var customer = requestParameters.customerId;
		//var site = requestParameters.s;
		var wishlistItemIds = [];
		
		var filters = [new nlobjSearchFilter("custrecord_wishlist_customer", null, "is", customer)];
	
		var columns = [new nlobjSearchColumn("internalid","custrecord_wishlist_item"),
					   new nlobjSearchColumn("custrecord_wishlist_quantity")];
		
		var wishlistItemData = _util.convertToSimpleArray(new nlapiSearchRecord("customrecord_wishlist", "customsearch_search_wishlist", filters, columns));
		
		// Filter down to just the id's so we can request getItems
		for(var i = 0; i < wishlistItemData.length; i++){ wishlistItemIds.push(wishlistItemData[i].custrecord_wishlist_item.value); }
		var items = _api.getItems({ids : wishlistItemIds}); // Get netsuite data for wishlist items
		
		// Merge wishlist data, with item data
		for(var i = 0; i < items.length; i++){
			for(var j = 0; j < wishlistItemData.length; j++){
				
				if(wishlistItemData[j].custrecord_wishlist_item.value === items[i]._internalid.value){
					items[i].wishlistData = wishlistItemData[j];
					break; // found it - move on to the next item
				}
			}
		}
		
		return items;
	},
	
	searchWishlists : function(requestParameters){ // {searchValue : 'hey!'}
		var foundWishlists = [];
		if(requestParameters.searchValue.replace(/[^A-Za-z]/g,"").length > 0){
			var filters = [['email', 'contains', requestParameters.searchValue],
						   'or', ['firstname', 'contains', requestParameters.searchValue],
						   'or', ['lastname', 'contains', requestParameters.searchValue]];
	
			var publicWishlists = nlapiSearchRecord('customer', 'customsearch_search_customer_wishlist', filters, null);
	
			if (publicWishlists && publicWishlists.length > 0){
				for (var i = 0; i < publicWishlists.length; i++){
					foundWishlists.push({customerId : publicWishlists[i].getId(),
									email : publicWishlists[i].getValue('email'),
									firstName : publicWishlists[i].getValue('firstname'),
									lastName : publicWishlists[i].getValue('lastname')});	
				}
			}
		}
		return foundWishlists;
	}
};

function parseRequest(request, response){
	
	var requestParameters = _util.getRequestParameters(request);
	var responseData = _api[requestParameters.method](requestParameters);

	var returnData = {};
	
	if(responseData !== false){
		returnData.success = true;
		returnData.data = responseData;
	}else{
		returnData.success = false;
	}
	
	if(requestParameters.callback){ // JSONP
		response.write(requestParameters.callback + '(' + JSON.stringify(returnData) + ')');
	}else{ // JSON
		response.write(JSON.stringify(returnData));
	}
	
	return;
}
